# toolchains/arm-none-eabi/windows/BUILD.bazel

load("@rules_cc//cc:defs.bzl", "cc_toolchain")
load(":config.bzl", "cc_arm_none_eabi_windows_config")

package(default_visibility = ["//visibility:public"])

compiler = "arm-none-eabi-windows"

filegroup(
    name = "all_files",
    srcs = [
        ":ar_files",
        ":compiler_files",
        ":linker_files",
        "@{}//:compiler_pieces".format(compiler),
    ],
)

filegroup(
    name = "compiler_files",
    srcs = [
        "arm-none-eabi-gcc.bat",
        "@{}//:compiler_pieces".format(compiler),
        "@{}//:gcc".format(compiler),
    ],
)

filegroup(
    name = "linker_files",
    srcs = [
        "arm-none-eabi-gcc.bat",
        "arm-none-eabi-ld.bat",
        "@{}//:ar".format(compiler),
        "@{}//:compiler_pieces".format(compiler),
        "@{}//:gcc".format(compiler),
        "@{}//:ld".format(compiler),
    ],
)

filegroup(
    name = "ar_files",
    srcs = [
        "arm-none-eabi-ar.bat",
        "@{}//:ar".format(compiler),
    ],
)

filegroup(
    name = "objcopy_files",
    srcs = [
        "arm-none-eabi-objcopy.bat",
        "@{}//:objcopy".format(compiler),
    ],
)

filegroup(
    name = "strip_files",
    srcs = [
        "arm-none-eabi-strip.bat",
        "@{}//:strip".format(compiler),
    ],
)

cc_arm_none_eabi_windows_config(
    name = "windows_config",
)

cc_toolchain(
    name = "windows",
    all_files = ":all_files",
    ar_files = ":ar_files",
    compiler_files = ":compiler_files",
    dwp_files = ":empty",
    linker_files = ":linker_files",
    objcopy_files = ":objcopy_files",
    strip_files = ":strip_files",
    supports_param_files = 0,
    toolchain_config = ":windows_config",
    toolchain_identifier = "arm-none-eabi-windows",
)
